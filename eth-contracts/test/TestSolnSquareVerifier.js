// Test if a new solution can be added for contract - SolnSquareVerifier

// Test if an ERC721 token can be minted for contract - SolnSquareVerifier
const fs = require('fs');
const truffleAssert = require('truffle-assertions');

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SolnSquareVerifier = artifacts.require('SolnSquareVerifier');
var SquareVerifier = artifacts.require('SquareVerifier');

contract('SolnSquareVerifier', accounts => {

    let rawdata = fs.readFileSync(__dirname + '/proof.json');  
    let proof = JSON.parse(rawdata);  
    var verifier;
    var contract;
    before('setup contract', async () => {
        verifier = await SquareVerifier.new();
        contract = await SolnSquareVerifier.new(verifier.address);
    });

    it('can verify correct proof', async () => {
        let result = null;
        // add solution for token 1
        await contract
        .addSolution(proof['proof']['a'], proof['proof']['b'], proof['proof']['c'], proof['inputs'],
        1, {from:accounts[0],gasLimit: "4600000"})
        .then((res) => {
            result = res;
        });
        // test that Solution Added event is emitted
        truffleAssert.eventEmitted(result, 'SolutionAdded', (ev) => {
            return ev['to'] == accounts[0];
        });
    })

    it('cannot submit used proof', async () => {
        let error = null;
        await contract
        .addSolution(proof['proof']['a'], proof['proof']['b'], proof['proof']['c'], proof['inputs'],
        2, {from:accounts[0],gasLimit: "4600000"})
        .catch((err) => {
            error = err;
        });
        assert.notEqual(error, null, "It should throw an error");
    })
    
    it('can mint after proof', async () => {
        await contract.mint(accounts[0], 1, {from:accounts[0],gasLimit: "4600000"});
        let owner = await contract.ownerOf(1);
        let balance = await contract.balanceOf(accounts[0]);
        assert.equal(owner, accounts[0], "Owner should be accounts[0]");
        assert.equal(balance, 1, "Balance should be 1");
    })

    it('cannot mint wihout proof', async () => {
        let error = null;
        await contract.mint(accounts[0], 2, {from:accounts[0],gasLimit: "4600000"})
        .catch((err) => {
            error = err;
        });
        assert.notEqual(error, null, "It should throw an error");
    })

})
