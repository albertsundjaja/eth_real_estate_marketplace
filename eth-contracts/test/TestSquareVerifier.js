const fs = require('fs');
const truffleAssert = require('truffle-assertions');

// define a variable to import the <Verifier> or <renamedVerifier> solidity contract generated by Zokrates
var SquareVerifier = artifacts.require('SquareVerifier');

contract('TestERC721Mintable', accounts => {

    let rawdata = fs.readFileSync(__dirname + '/proof.json');  
    let proof = JSON.parse(rawdata);  
    var contract;
    before('setup contract', async () => {
        contract = await SquareVerifier.new();
    });
    

    it('can verify correct proof', async () => {
        let result = null;
        await contract
        .verifyTx(proof['proof']['a'], proof['proof']['b'], proof['proof']['c'], proof['inputs'],{from:accounts[0],gasLimit: "4600000"})
        .then((res) => {
            result = res;
        });
        // test that verified event is emitted
        truffleAssert.eventEmitted(result, 'Verified', (ev) => {
            return ev['s'] == "Transaction successfully verified.";
        });
    })

    it('can reject incorrect proof', async () => {
        let result = null;
        await contract
        .verifyTx(proof['proof']['c'], proof['proof']['b'], proof['proof']['c'], proof['inputs'],{from:accounts[0],gasLimit: "4600000"})
        .then((res) => {
            result = res;
        });
        // test that verified event is not emitted
        truffleAssert.eventNotEmitted(result, 'Verified');
    })

    
// Test verification with incorrect proof
})
